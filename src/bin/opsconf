#!/usr/bin/env python3

import argparse
import logging
import os
import sys

import opsconf
import opsconf.subcommand

OPSCONF_VERSION = opsconf.OPSCONFVERSION
format = '[%(levelname)s] %(message)s'
logging.basicConfig(format=format)
LOGGER = logging.getLogger('opsconf')

if __name__ == "__main__":
    commonParser = argparse.ArgumentParser(add_help=False)
    commonParser.add_argument('-v', '--verbose', help='add debug logs', action='store_true')
    commonParser.add_argument('-vv', '--very-verbose', help='add debug logs also in git', action='store_true')

    parser = argparse.ArgumentParser(
        description="File-centric Version Control System. Thought for operational data.",
        )

    subparsers = parser.add_subparsers(title="Opsconf commands", dest='command')

    parsers = {}
    parsers['sync'] = subparsers.add_parser('sync', help="synchronize local and distant repositories", parents=[commonParser])
    parsers['commit'] = subparsers.add_parser('commit', help="commit changes to a file", parents=[commonParser])
    parsers['log'] = subparsers.add_parser('log', help="show changelogs of a file", parents=[commonParser])
    parsers['diff'] = subparsers.add_parser('diff', help="show difference between two versions of a file", parents=[commonParser])
    parsers['remove'] = subparsers.add_parser('remove', help="remove a file from the repository", parents=[commonParser])
    parsers['rollback'] = subparsers.add_parser('rollback', help="rollback a file to a given versions", parents=[commonParser])
    parsers['qualify'] = subparsers.add_parser('qualify', help="mark a file version as ready for qualification", parents=[commonParser])
    parsers['validate'] = subparsers.add_parser('validate', help="mark a file version as validated of production use", parents=[commonParser])

    parsers['init'] = subparsers.add_parser('init', help="initialize the local repository", parents=[commonParser])
    parsers['status'] = subparsers.add_parser('status', help="list the current version in given state (tag or branch)", parents=[commonParser])
    parsers['liststates'] = subparsers.add_parser('liststates', help="list the repository states", parents=[commonParser])
    parsers['checkout'] = subparsers.add_parser('checkout', help="get to a given repository state", parents=[commonParser])
    parsers['tag'] = subparsers.add_parser('tag', help="label the current state of the whole repository", parents=[commonParser])

    for command in parsers:
        module = getattr(opsconf.subcommand, command)
        module.setupParser(parsers[command])

    parser.add_argument('-V', '--version', help='show the version', action='version', version="%(prog)s "+OPSCONF_VERSION)

    if len(sys.argv) == 1:
        parser.print_help(sys.stderr)
        sys.exit(1)
    args = parser.parse_args()

    if args.verbose or 'OPSCONF_DEBUG' in os.environ:
        LOGGER.setLevel(logging.DEBUG)
        logging.getLogger('opsconf.libgit').setLevel(logging.INFO)
        LOGGER.debug("Let's be verbose")
    elif args.very_verbose:
        LOGGER.setLevel(logging.DEBUG)
        logging.getLogger('opsconf.libgit').setLevel(logging.DEBUG)
        LOGGER.debug("Let's be very verbose")
    else:
        LOGGER.setLevel(logging.INFO)
    
    if args.command != 'init' and not opsconf.isOpsConfRepo(): 
        LOGGER.error("This folder is not a git repository or is missing its hooks. Run 'opsconf init'")
        sys.exit(1)

    module = getattr(opsconf.subcommand, args.command)
    try:
        module.runCmd(args)
    except opsconf.OpsconfFatalError as e:
        LOGGER.error(e)
        sys.exit(1)

